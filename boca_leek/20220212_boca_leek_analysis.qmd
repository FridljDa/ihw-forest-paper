---
title: "boca_leek_dataset"
format: html
editor: visual
---

```{r, echo=FALSE}
library(ggplot2)
library(here)
library(dplyr)

set.seed(4)
options(bitmapType ="cairo")
```

```{r}
#devtools::load_all("../../IHW")
devtools::load_all("/Users/default/Google Drive/currentDocumants/research/2022_IHW-Forest/Code/IHW")

```

https://www.broadinstitute.org/collaboration/giant/index.php/GIANT_consortium_data_files#GWAS_Anthropometric_2015_BMI

All_ancestries_SNP_gwas_mc_merge_nogc.tbl.uniq

```{r}
load(here("data/BMI_GIANT_GWAS.RData"))
#BMI_GIANT_GWAS <- BMI_GIANT_GWAS %>% rename(pvalue = p)
#BMI_GIANT_GWAS <- BMI_GIANT_GWAS %>% sample_n(100000)
head(BMI_GIANT_GWAS)
```

https://github.com/SiminaB/Fdr-regression/blob/master/BMI%20GIANT%20meta-analysis/2.make_Figure_1.Rmd

```{r}
par(mfrow=c(1,2))
hist(BMI_GIANT_GWAS$p, col="grey", main="All N", xlab="P-value")
hist(BMI_GIANT_GWAS$p[BMI_GIANT_GWAS$N < 200000], 
     col="grey", main="N < 200,000", xlab="P-value")
```

```{r}
hist(BMI_GIANT_GWAS$N)
```

```{r}
hist(BMI_GIANT_GWAS$Freq_MAF_Hapmap)
```

```{r, eval = FALSE}
groups_by_filter_local <- function(covariate, nbins, ties.method="random", seed=NULL){
  if (!is.null(seed) && ties.method=="random"){
    #http://stackoverflow.com/questions/14324096/setting-seed-locally-not-globally-in-r?rq=1
    tmp <- runif(1)
    old <- .Random.seed
    on.exit( { .Random.seed <<- old } )
    set.seed(as.integer(seed)) 
  }
  if(ties.method == "random"){
    rfs <- rank(covariate, ties.method=ties.method)/length(covariate)
	  as.factor(ceiling( rfs* nbins))
  }else if(ties.method == "systematic"){
    #will lead to systematic bias with tias, but has more helpful factor labels
    #breaks <- quantile(covariate, probs = seq(0, 1, length.out = nbins+1))
    #cut(covariate, breaks=breaks, include.lowest=TRUE)
    #oneR::bin(covariate, method = "content", nbins = nbins)
    Hmisc::cut2(covariate, g=nbins)
  }
}
```

```{r}
names(BMI_GIANT_GWAS)
BMI_GIANT_GWAS <- BMI_GIANT_GWAS %>%
  mutate(N_bin = groups_by_filter(N, nbins = 4),
         MAF_bin = groups_by_filter(Freq_MAF_Hapmap, nbins = 4))
```

```{r}
ggplot(BMI_GIANT_GWAS,  
       aes(x = p)) +
  geom_histogram(boundary = 0, bins = 50) +
  facet_wrap(vars(N_bin), nrow = 2) 
```

```{r}
ggplot(BMI_GIANT_GWAS,  
       aes(x = p)) +
  geom_histogram(boundary = 0, bins = 50) +
  facet_wrap(vars(MAF_bin), nrow = 2) 
```

## Run IHW

Benjamini Hochber

```{r}
BMI_GIANT_GWAS_p_adjust <- p.adjust(BMI_GIANT_GWAS$p, method = "BH")

sum(BMI_GIANT_GWAS_p_adjust <= 0.05)
```

```{r, eval = F}
ihw_quantile_n <- IHW::ihw(p ~  N,data = BMI_GIANT_GWAS, alpha = 0.05, stratification_method = "quantiles")
rejections(ihw_quantile_n) 
```

```{r, eval = F}
ihw_quantile_maf <- IHW::ihw(p ~ Freq_MAF_Hapmap,data = BMI_GIANT_GWAS, alpha = 0.05, stratification_method = "quantiles")
rejections(ihw_quantile_maf) 
```

```{r}
ihw_quantile_n_maf <- IHW::ihw(p ~ Freq_MAF_Hapmap + N,data = BMI_GIANT_GWAS, alpha = 0.05, stratification_method = "quantiles")
rejections(ihw_quantile_n_maf) 
```

```{r}
ihw_forest_n_maf <- 
        IHW::ihw(
          p ~ Freq_MAF_Hapmap + N,
          data = BMI_GIANT_GWAS,
          alpha = 0.05,
          #lambdas = Inf,
          stratification_method = "forest",
           n_censor_thres = 3, ntrees = 3, nodedepth = 4, nodesize = 4000
        )
      
```

```{r}
rejections(ihw_forest_n_maf)
```
