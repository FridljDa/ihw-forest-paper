---
title: "plot_smooth_weight"
format: html
editor: visual
---

```{r, message = FALSE}
library("dplyr")
library("reshape2")
library("ggplot2")
library(here)
library(purrr)

#devtools::load_all("/Users/default/Google Drive/currentDocumants/research/2022_IHW-Forest/Code/IHW")
devtools::load_all("../../IHW")
#devtools::load_all("../IHWForestPaper")

options(bitmapType ="cairo")
```

```{r}
myPalette <- colorRampPalette(rev(RColorBrewer::brewer.pal(11, "Spectral")))
```

## generate data

Generate simulation from https://support.bioconductor.org/p/90005/#9137847.

```{r}
# test data
m_test <- 100
m <- 1e5
# nfolds <- 3
# folds <- sample(1:nfolds, m, replace = TRUE)
```

```{r}
prop_alt <- function(covariate.1, covariate.2) {
  1 / (1 + exp(-covariate.1))
  # 1 / (1 + exp(-1 * (3 * covariate.1 - 5)))
  # abs(sin(pi*covariate.1))
}
```

generate training data

```{r}
data_train <- data.frame(
  covariate.1 = runif(m, -1, 1),
  covariate.2 = runif(m, -1, 1)
)

#data_train <- expand.grid(
#  covariate.1 = seq(-1, 1, length.out = sqrt(m)),
#  covariate.2 = seq(-1, 1, length.out = sqrt(m))
#)

data_train <- data_train %>%
  mutate(
    prop_alt = prop_alt(covariate.1, covariate.2),
    Hs = rbinom(n(), size = 1, prop_alt),
    pvalue = ifelse(Hs,
      rbeta(n(), 0.25, 1),
      runif(n())
    )
  )
```

generate testing data to plot on grid

```{r}
data_test <- expand.grid(
  covariate.1 = seq(-1, 1, length.out = m_test),
  covariate.2 = seq(-1, 1, length.out = m_test)
)

data_test <- data_test %>% mutate(
  prop_alt = prop_alt(covariate.1, covariate.2),
  Hs = rbinom(n(), size = 1, prop_alt),
  pvalue = ifelse(Hs,
    rbeta(n(), 0.25, 1),
    runif(n())
  )
)
```

combine both

```{r}
data_train_test <- rbind(data_train, data_test)
folds <- c(rep(1, nrow(data_train)), rep(2, nrow(data_test)))
head(data_train_test)
```

## True contours

```{r}
data_true <- expand.grid(
  covariate.1 = seq(-1, 1, length.out = m_test),
  covariate.2 = seq(-1, 1, length.out = m_test)
)

data_true <- data_true %>%
  mutate(
    prop_alt = prop_alt(covariate.1, covariate.2),
    true_alt_expectation = 0.25 / (0.25 + 1),
    cond_exp = 0.5 + prop_alt * (0.5 - true_alt_expectation),
  )
```

This is not the same thing as the true weights. But the contours should be the same.

```{r}
ggplot(data_true, aes(x = covariate.1, y = covariate.2, color = cond_exp))+
  geom_point() +
  scale_colour_gradientn(colours = myPalette(100))
```

## Quantile

```{r}
ihw_quantiles <- ihw(formula = pvalue ~ covariate.1 + covariate.2, 
                  data = data_train_test, 
                  alpha = 0.1, 
                  stratification_method = "quantiles", 
                  folds = folds, 
                  seed = 1)

ihw_quantiles_df_test <- ihw_quantiles@df %>%
  filter(fold == 2)
```

```{r}
weight_matrix <- ihw_quantiles@weights
nbins <- ihw_quantiles@nbins
ihw_quantiles_df <- ihw_quantiles@df
ihw_quantiles_df$groups_population <- IHW::groups_by_filter_multivariate(ihw_quantiles_df %>%
  select(covariate.1, covariate.2), 
                                                      nbins, 
                                                      seed = 1)
  
ihw_quantiles_df$weight_quantile <- purrr::map2_dbl(folds, 
                                                    ihw_quantiles_df$groups_population, 
                            function(folds_i, groups_quantile_i){
                              weight_matrix[groups_quantile_i,folds_i]
                            })
```

```{r, eval = FALSE}
covariates <- ihw_quantiles_df_test %>%
  select(covariate.1, covariate.2)
group_quantile <- groups_by_filter_multivariate(covariates,
                              nbins = 36, 
                              seed = 1)

sum(group_quantile != ihw_quantiles_df_test$group)
head(ihw_quantiles_df)
```

```{r}
ihw_quantiles_df %>%
  filter(fold == 2) %>%
  ggplot(aes(x = covariate.1, y = covariate.2, color = weight_quantile))+
  geom_point() +
  scale_colour_gradientn(colours = myPalette(100))
```

```{r}
ggplot(ihw_quantiles_df_test, aes(x = covariate.1, y = covariate.2, color = weight))+
  geom_point() +
  scale_colour_gradientn(colours = myPalette(100))
```

## Tree

```{r}
ihw_tree <- ihw(formula = pvalue ~ covariate.1 + covariate.2, 
                  data = data_train_test, 
                  alpha = 0.1, 
                  stratification_method = "forest", 
                  folds = folds, 
                  ntrees = 1, 
                  n_censor_thres = 1, 
                  nodedepth = 3, 
                  nodesize = 1000, 
                  seed = 1)

ihw_tree_df_test <- ihw_tree@df %>%
  filter(fold == 2)
```

```{r}
ggplot(ihw_tree_df_test, aes(x = covariate.1, y = covariate.2, color = weight))+
  geom_point() +
  scale_colour_gradientn(colours = myPalette(100))
```

## Forest

```{r}
ihw_forest <- ihw(formula = pvalue ~ covariate.1 + covariate.2, 
                  data = data_train_test, 
                  alpha = 0.1, 
                  stratification_method = "forest", 
                  folds = folds, 
                  ntrees = 3, 
                  n_censor_thres = 3, 
                  nodedepth = 3, 
                  nodesize = 1000, 
                  seed = 1)

ihw_forest_df_test <- ihw_forest@df %>%
  filter(fold == 2)
```

```{r}
ggplot(ihw_forest_df_test, aes(x = covariate.1, y = covariate.2, color = weight))+
  geom_point() +
  scale_colour_gradientn(colours = myPalette(100))
```
