---
title: "20230803_simulation_flexible"
format: html
editor: visual
---

## Quarto

```{r}
library(magrittr)
library(dplyr)
library(ggpubr)
library(ggplot2)
library(here)
library(purrr)
#library(IHWForestPaper)
devtools::load_all(here("IHWForestPaper"))
knitr::opts_chunk$set(echo = TRUE)

set.seed(123)
theme_set(theme_cowplot())
options(bitmapType = "cairo")
```

```{r}
simulation_evaluated <- latest_files(here("simulation_flexible/data"), "discrete_prop_alt_eval")
head(simulation_evaluated)
```

Let $d_1,d_2 \in \mathbb{N}$. Let $p\in (0,\infty)$. Let $\|x\|_p = \left(\sum{i=1}^{n} \|x_i\|_p\right)^{1/p}$ and $B_p(r) = \{x \in \mathbb{R}^d : \|x\|_p \leq r\}$. Let $s\in (0,1]$. Let $$
\begin{aligned}
   \pi_1: &[-0.5,0.5]^{(d_1+d_2)} &\rightarrow &[0,1], 
   \\& x &\mapsto &s\cdot 1\left(x\in \left(B_p^{d_1}(r)\times [-0.5,0.5]^{(d_2)}\right)\right).
\end{aligned}
$$

Fix $\bar{\pi}_1 \in (0,1)$. We choose $r$ s.t. $\int_{[-0.5,0.5]^d}\pi_1(x)dx=s\lambda^{d_1}(B_p^{d_1}(r))=\bar{\pi}_1$, where $\lambda$ denotes the Lebesgue measure.

Let $\kappa\in (0,0.1)$. We generate our data from the following model: $$
\begin{aligned}
   &X_i \stackrel{\text{iid.}}{\sim} \operatorname{U}[-0.5,0.5]^d, \\
   &H_i \mid X_i \sim  \operatorname{Bernoulli}(\pi_1(X_i)),\\
   &P_i \mid H_i = 0, X_i \stackrel{\text{iid.}}{\sim} (1-\kappa) \operatorname{U}[0,1]+\kappa \operatorname{Beta}(1,0.5),\\
   &P_i \mid H_i = 1, X_i  \sim \operatorname{Beta}(0.25,1).
\end{aligned}
$$

```{r}
# Assuming simulation_evaluated is your data frame
unique_levels <- lapply(simulation_evaluated, unique)
unique_levels <- unique_levels[c("dimensions","kappa","ndim","signal_strength","lp_norm","target_average_alt_prob","prop_alt_function_name")]
unique_levels
```

## Diagnostic Simulation

```{r}
simulation_evaluated %>%
  ggplot(aes(x = target_average_alt_prob, y =1- pi0s)) +
  geom_point() +
  xlim(0,0.25) +
  ylim(0,0.25) +
  geom_abline(intercept = 0, slope = 1, linetype="dashed", color="red") 
  
```

## Evaluating multiple testing methods

```{r}
first_elements <- lapply(unique_levels, function(x) x[1])
first_elements
```

## Plotting different stuff

```{r}
simulation_evaluated %>%
  filter(kappa == 0, method %in% c("AdaPT", "BH")) %>%
  plot_fdr_power(group_by_dimension = "dimensions", log_trans = FALSE)
```

```{r}
simulation_evaluated %>%
  #filter_df(first_elements[names(first_elements) != "kappa"]) %>%
plot_fdr_power(group_by_dimension = "dimensions", log_trans = FALSE)
```

```{r}
simulation_evaluated %>%
  filter_df(first_elements[names(first_elements) != "dimensions"]) %>%
plot_fdr_power(group_by_dimension = "dimensions", log_trans = FALSE)
```

```{r}
simulation_evaluated %>%
  filter_df(first_elements[names(first_elements) != "ndim"]) %>%
plot_fdr_power(group_by_dimension = "ndim", log_trans = FALSE)
```
